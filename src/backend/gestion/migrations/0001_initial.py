# Generated by Django 4.2.1 on 2023-06-27 08:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import gestion.constant


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Classe",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("capacite", models.IntegerField()),
                ("code", models.CharField(max_length=10, unique=True)),
            ],
            options={
                "verbose_name": "Classe",
                "verbose_name_plural": "Classes",
            },
        ),
        migrations.CreateModel(
            name="Cours",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("titre", models.CharField(max_length=255)),
                ("code", models.CharField(max_length=10, unique=True)),
            ],
            options={
                "verbose_name": "Cours",
                "verbose_name_plural": "Cours",
            },
        ),
        migrations.CreateModel(
            name="Enseignant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("entite", models.CharField(blank=True, max_length=255)),
                (
                    "grade",
                    models.CharField(
                        choices=[
                            ("assistant", "assistant"),
                            ("docteur", "docteur"),
                            ("professeur", "professeur"),
                        ],
                        default=gestion.constant.GradeEnseignant["DOCTEUR"],
                        max_length=255,
                    ),
                ),
            ],
            options={
                "verbose_name": "Enseignant",
                "verbose_name_plural": "Enseignants",
            },
        ),
        migrations.CreateModel(
            name="Filiere",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("titre", models.CharField(max_length=255)),
                ("code", models.CharField(max_length=10, unique=True)),
            ],
            options={
                "verbose_name": "Filiere",
                "verbose_name_plural": "Filieres",
            },
        ),
        migrations.CreateModel(
            name="Groupe",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nom", models.CharField(max_length=255)),
                ("capacite", models.IntegerField()),
                ("code", models.CharField(max_length=10, unique=True)),
                (
                    "classe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="gestion.classe"
                    ),
                ),
            ],
            options={
                "verbose_name": "Groupe",
                "verbose_name_plural": "Groupes",
            },
        ),
        migrations.CreateModel(
            name="Niveau",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("titre", models.CharField(max_length=255)),
                ("code", models.CharField(max_length=10, unique=True)),
            ],
            options={
                "verbose_name": "Niveau",
                "verbose_name_plural": "Niveaux",
            },
        ),
        migrations.CreateModel(
            name="Salle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("designation", models.CharField(max_length=255)),
                ("capacite", models.IntegerField()),
                ("code", models.CharField(max_length=10)),
            ],
            options={
                "verbose_name": "Salle",
                "verbose_name_plural": "Salles",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        error_messages={
                            "unique": "A user with that email address already exists."
                        },
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, null=True, verbose_name="last name"
                    ),
                ),
                ("joined_at", models.DateField(auto_now_add=True)),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates wheter the user is an admin and can log into this admin site or not.",
                        verbose_name="admin status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates wheter a this user should be treated as active or not. You can unckeck it instead of delete the user.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("is_responsable", models.BooleanField(default=False)),
                ("is_teacher", models.BooleanField(default=False)),
                ("is_student", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="users",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="users",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
        ),
        migrations.CreateModel(
            name="Programmation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("debut", models.TimeField()),
                ("fin", models.TimeField()),
                ("date_creation", models.DateTimeField(auto_now=True)),
                ("date_modification", models.DateTimeField(auto_now_add=True)),
                (
                    "cours",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="gestion.cours"
                    ),
                ),
                (
                    "cree_par",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="gestion.user"
                    ),
                ),
                (
                    "enseignant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="gestion.enseignant",
                    ),
                ),
                (
                    "groupe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="gestion.groupe"
                    ),
                ),
                (
                    "salle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="gestion.salle"
                    ),
                ),
            ],
            options={
                "verbose_name": "Programmation",
                "verbose_name_plural": "Programmations",
            },
        ),
        migrations.CreateModel(
            name="Etudiant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "matricule",
                    models.CharField(editable=False, max_length=10, unique=True),
                ),
                (
                    "classe",
                    models.ForeignKey(
                        default="None",
                        on_delete=django.db.models.deletion.SET_DEFAULT,
                        to="gestion.classe",
                    ),
                ),
                (
                    "groupe",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="gestion.groupe",
                    ),
                ),
                (
                    "utilisateur",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Etudiant",
                "verbose_name_plural": "Etudiants",
            },
        ),
        migrations.AddField(
            model_name="enseignant",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to="gestion.user"
            ),
        ),
        migrations.AddField(
            model_name="classe",
            name="filiere",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="gestion.filiere"
            ),
        ),
        migrations.AddField(
            model_name="classe",
            name="niveau",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="gestion.niveau"
            ),
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("is_responsable", True),
                        ("is_student", False),
                        ("is_teacher", True),
                    ),
                    models.Q(
                        ("is_responsable", False),
                        ("is_student", True),
                        ("is_teacher", False),
                    ),
                    models.Q(
                        ("is_responsable", False),
                        ("is_student", False),
                        ("is_teacher", False),
                    ),
                    models.Q(
                        ("is_responsable", True),
                        ("is_student", False),
                        ("is_teacher", False),
                    ),
                    _connector="OR",
                ),
                name="student_not_responsable_and_teacher",
            ),
        ),
    ]
